plot(q.obj)
# look at the estimate of m0 (proportion of null variables)
q.obj$pi0
tout$q.value <- q.obj$qvalues
ttidy <- gather(tout[,c("p.value","q.value")])
ggplot(ttidy) + geom_histogram(bins = 30,aes(x=value)) + facet_wrap(~ key, scales="free")
tout.order <- tout[order(tout$p.value),]
tout.order[1:10,]
mod = model.matrix(~ pdata$strain + pdata$lane.number + pdata$experiment.number)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
limma_pvals = topTable(ebayes_limma,number=dim(edata)[1])$P.Value
hist(limma_pvals,col=4)
#  Ordinary t-statistic
ordinary.t <- ebayes_limma$coef[,2] / ebayes_limma$stdev.unscaled[,2] / ebayes_limma$sigma
plot(ordinary.t, ebayes_limma$coefficients[,2],pch=20); abline(0,1,col="red")
limma_out <- data.table(pvalue = ebayes_limma$p.value[,2], coeff = ebayes_limma$coefficients[,2],
p.bonferroni = p.adjust(ebayes_limma$p.value[,2], method="bonferroni"),
qvalue = qvalue(ebayes_limma$p.value[,2])$qvalues)
limma_tidy <- gather(limma_out)
ggplot(limma_tidy) + geom_histogram(bins = 30,aes(x=value)) + facet_wrap(~ key, scales="free")
load(file="../Week1/bottomly.Rdata")
setwd('/home/ME/Coding/NEO/')
set("/Home/ME/Coding/NEO")
setwd("/Home/ME/Coding/NEO")
setwd("~/ME/Coding/NEO")
load(file="Week1/bottomly.Rdata")
setwd("~/ME/Coding/NEO/Week3")
load(file="../Week1/bottomly.Rdata")
load(file="../Week2/bottomly.Rdata")
ls()
edata <- as.matrix(exprs(bottomly.eset))
dim(edata)
edata[1:5,1:5]
edata <- edata[rowMeans(edata) > 10, ]
edata <- log2(as.matrix(edata) + 1)
library(RColorBrewer)
library(gplots)
my_palette <- colorRampPalette(c("blue", "white", "orange"))(n = 299)
png("bottomly_heatmap_raw.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Raw", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row",
Colv=FALSE)
dev.off()
png("bottomly_heatmap_clustered.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row")
dev.off()
?heatmap.2
png("Dabrowska_problem1_a.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row",
dendrogram = "both")
png("Dabrowska_problem1_a.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "row",
dendrogram = "both")
dev.off()
png("Dabrowska_problem1_b.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "none",
dendrogram = "column")
dev.off()
png("Dabrowska_problem1_a.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "none",
dendrogram = "both")
dev.off()
png("Dabrowska_problem1_a.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
png("Dabrowska_problem1.png",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
pdf("Dabrowska_problem1.pdf",height=700,width=700)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
pdf("Dabrowska_problem1.pdf",height=10,width=10)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
edata <- t(scale(t(edata), scale=FALSE, center=TRUE))
svd.out <- svd(edata)
names(svd.out)
print(paste("Dimension of left singular vectors:", dim(svd.out$u)))
print(paste("Length of singular values:",length(svd.out$d)))
print(paste("Dimension of right singular vectors:",dim(svd.out$v)))
par(mfrow=c(1,2))
plot(svd.out$d, pch=20, ylab="Singular values")
plot(svd.out$d^2/sum(svd.out$d^2)*100, pch=20, ylab="% variance explained")
plot(1:ncol(edata), svd.out$v[,1],pch=20)
plot(1:ncol(edata), svd.out$v[,2],pch=20)
plot(1:ncol(edata), svd.out$v[,3],pch=20)
PC = data.table(svd.out$v,pData(bottomly.eset))
PC <- data.table(svd.out$v,pData(bottomly.eset))
suppressPackageStartupMessages({
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(qvalue)
library(tidyverse)
library(corpcor)
library(data.table)
library(jackstraw)
})
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(qvalue)
library(tidyverse)
library(data.table)
library(corpcor)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V1, y=V2, col=as.factor(strain)))
ggplot(PC) + geom_point(aes(x=V1, y=V2, col=as.factor(lane.number)))
ggplot(PC) + geom_point(aes(x=V1, y=V2, col=as.factor(experiment.number)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V1, y=V3, col=as.factor(strain)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V4, col=as.factor(strain)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V3, y=V4, col=as.factor(strain)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V5, col=as.factor(strain)))
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
# pdf("Dabrowska_problem2.pdf",height=10,width=10)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x="V2", y="V3", col=as.factor(strain)))
#dev.off()
# pdf("Dabrowska_problem2.pdf",height=10,width=10)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
#dev.off()
pdf("Dabrowska_problem2.pdf",height=10,width=10)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
dev.off()
pdf("Dabrowska_problem2.pdf",height=5,width=5)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
dev.off()
pdf("Dabrowska_problem2.pdf",height=5,width=3)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
dev.off()
pdf("Dabrowska_problem2.pdf",height=3,width=5)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
dev.off()
ggplot(PC) + geom_boxplot(aes(x=as.factor(strain), y=V1))
ggplot(PC) + geom_violin(aes(x=as.factor(strain), y=V1),draw_quantiles = c(0.25, 0.5, 0.75))
ggplot(PC) + geom_violin(aes(x=as.factor(strain), y=V1),draw_quantiles = c(0.25, 0.5, 0.75)) + geom_jitter(aes(x=as.factor(strain), y=V1))
str(svd)
str(svd.out)
plot(1:ncol(edata), svd.out$u[,1],pch=20)
plot(1:ncol(edata), svd.out$v[,1],pch=20)
plot(1:ncol(edata), svd.out$v[,2],pch=20)
plot(1:ncol(edata), svd.out$u[,1],pch=20)
plot(1:ncol(edata), svd.out$u[,1].T, pch=20)
plot(1:ncol(edata), svd.out$u.T[1,], pch=20)
plot(1:ncol(edata), svd.out$u.T[2,]T, pch=20)
plot(1:ncol(edata), svd.out$u.T[1,], pch=20)
plot(1:ncol(edata), svd.out$u.T[2,], pch=20)
plot(svd.out$u[,1], svd.out$u[,2], pch=20)
plot(svd.out$u[,1], svd.out$u[,2])
plot(svd.out$u[,1], svd.out$u[,2], pch=20)
plot(svd.out$u[,1], svd.out$u[,2], pch=1)
plot(svd.out$u[,1], svd.out$u[,2], pch=2)
plot(svd.out$u[,1], svd.out$u[,2], pch=3)
plot(svd.out$u[,1], svd.out$u[,2], pch=4)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Right singular vector")
pdf("Dabrowska_problem3.pdf",height=3,width=5)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Right singular vector")
dev.off()
pdf("Dabrowska_problem3.pdf",height=3,width=5)
PC <- data.table(svd.out$u,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=U1, y=U2, col=as.factor(strain)))
pdf("Dabrowska_problem3.pdf",height=3,width=5)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Right singular vector")
dev.off()
pdf("Dabrowska_problem3.pdf",height=5,width=10)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Right singular vector")
dev.off()
data <- data.frame(svd.out$u[, 1:5])
head(df)
data <- data.frame(svd.out$u[, 1:5])
head(data)
data <- data.frame(svd.out$u[, 1:5])
columns(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data.frame(svd.out$u[, 1:5])
column(data) <- c("U1", "U2", "U3", "U4", "U5")
?columns
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
head(data)
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
df <- data %>% gather(key = Vector, value = Value, U1:U5)
head(df)
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value, fill = Vector)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Violin Plots of U Components",
x = "Component",
y = "Value") +
theme(legend.position = "none")
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Violin Plots of U Components",
x = "Component",
y = "Value") +
theme(legend.position = "none")
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Violin Plots of U Components",
x = "Left singular vector",
y = "Value") +
theme(legend.position = "none")
pdf("Dabrowska_problem4.pdf",height=5,width=10)
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Violin Plots of U Components",
x = "Left singular vector",
y = "Value") +
theme(legend.position = "none")
dev.off()
# compute PCs using prcomp and compare it with SVD
pc1 = prcomp(edata)
plot(pc1$rotation[,1],svd.out$v[,1])
# the results are different, because technically the data should be centered by column means
edata.col <- scale(edata, scale=FALSE, center=TRUE)
svd.col <- svd(edata.col)
plot(pc1$rotation[,1],svd.col$v[,1],col=2)
abline(0,1)
all(pc1$rotation[,1] == svd.col$v[,1])
library(irlba)
tsvd.out <- irlba(edata, nv = 4)
dim(tsvd.out$u)
length(tsvd.out$d)
dim(tsvd.out$v)
plot(tsvd.out$v[,1],-1*svd.out$v[,1]); abline(0,1,col="red")
plot(tsvd.out$v[,2],svd.out$v[,2]); abline(0,1,col="red")
library(irlba)
library(Rtsne)
install.packages('Rtsne')
library(irlba)
library(Rtsne)
# Set a seed for reproducible results
set.seed(1)
# complexity is a hyperparameter needed for this algorithm. 30 is a default
tsne_out <- Rtsne(edata,pca=FALSE,perplexity=60)
tsne_out = data.table(tsne_out$Y)
ggplot(tsne_out) + geom_point(aes(x=V1, y=V2))
tsne_pdata = data.table(tsne_out, pData(bottomly.eset))
str(tsne_out)
?kmeans
tmp <- kmeans(edata, k=5)
tmp <- kmeans(edata, centers=5)
str(tmp)
tsne_out <- Rtsne(edata, pca=FALSE, perplexity=60)
str(tsne_out)
clusters <- kmeans(edata, centers=5, nstart=25)$cluster
tsne_out <- Rtsne(edata, pca=FALSE, perplexity=60)$Y
tsne_data <- data.frame(
V1 = tsne_out[, 1],
V2 = tsne_out[, 2],
Cluster = as.factor(clusters)
)
ggplot(tsne_data) + geom_point(aes(x=V1, y=V2, color = Cluster))
ggplot(tsne_data) + geom_point(aes(x=V1, y=V2, color = Cluster)) + theme_minimal()
ggplot(tsne_data) +
geom_point(aes(x=V1, y=V2, color = Cluster)) +
theme_minimal() +
labs(title = "t-SNE Projection of Genes with K-means Clusters",
x = "t-SNE 1",
y = "t-SNE 2",
color = "Cluster")
clusters <- kmeans(edata, centers=5)$cluster
tsne_out <- Rtsne(edata, pca=FALSE, perplexity=60)$Y
tsne_data <- data.frame(
V1 = tsne_out[, 1],
V2 = tsne_out[, 2],
Cluster = as.factor(clusters)
)
clusters <- kmeans(edata, centers=5)$cluster
tsne_out <- Rtsne(edata, pca=TRUE, perplexity=60)$Y
tsne_data <- data.frame(
V1 = tsne_out[, 1],
V2 = tsne_out[, 2],
Cluster = as.factor(clusters)
)
ggplot(tsne_data) +
geom_point(aes(x=V1, y=V2, color = Cluster)) +
theme_minimal() +
labs(title = "t-SNE Projection of Genes with K-means Clusters",
x = "t-SNE 1",
y = "t-SNE 2",
color = "Cluster")
clusters <- kmeans(edata, centers=5)$cluster
tsne_out <- Rtsne(edata, pca=TRUE, perplexity=60)$Y
tsne_data <- data.frame(
V1 = tsne_out[, 1],
V2 = tsne_out[, 2],
Cluster = as.factor(clusters)
)
ggplot(tsne_data) +
geom_point(aes(x=V1, y=V2, color = Cluster)) +
theme_minimal() +
labs(title = "t-SNE Projection of Genes with K-means Clusters",
x = "t-SNE 1",
y = "t-SNE 2",
color = "Cluster")
pdf("figures/Dabrowska_problem5.pdf",height=5,width=10)
ggplot(tsne_data) +
geom_point(aes(x=V1, y=V2, color = Cluster)) +
theme_minimal() +
labs(title = "t-SNE Projection of Genes with K-means Clusters",
x = "t-SNE 1",
y = "t-SNE 2",
color = "Cluster")
dev.off()
pdf("figures/Dabrowska_problem4.pdf",height=5,width=10)
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Violin Plots of U Components",
x = "Left singular vector",
y = "Value") +
theme(legend.position = "none")
dev.off()
pdf("figures/Dabrowska_problem3.pdf",height=5,width=10)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Right singular vector")
dev.off()
pdf("figures/Dabrowska_problem2.pdf",height=3,width=5)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) + geom_point(aes(x=V2, y=V3, col=as.factor(strain)))
dev.off()
pdf("figures/Dabrowska_problem1.pdf",height=10,width=10)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
load(file="../Week2/bottomly.Rdata")
ls()
edata <- as.matrix(exprs(bottomly.eset))
dim(edata)
edata[1:5,1:5]
edata <- edata[rowMeans(edata) > 10, ]
edata <- log2(as.matrix(edata) + 1)
pdf("figures/Dabrowska_problem1.pdf",height=10,width=10)
heatmap.2(edata,
main = "Bottomly et al. Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
scale = "column",
dendrogram = "column")
dev.off()
pdf("figures/Dabrowska_problem4.pdf",height=5,width=10)
data <- data.frame(svd.out$u[, 1:5])
colnames(data) <- c("U1", "U2", "U3", "U4", "U5")
data <- data %>% gather(key = Vector, value = Value, U1:U5)
ggplot(data, aes(x = Vector, y = Value)) +
geom_violin(trim = FALSE, alpha = 0.7) +
theme_minimal() +
labs(title = "Top 5 left singular vector density",
x = "Left singular vector",
y = "Value") +
theme(legend.position = "none")
dev.off()
pdf("figures/Dabrowska_problem3.pdf",height=5,width=10)
plot(svd.out$u[,1], svd.out$u[,2], pch=4, xlab="Left singular vector 1", ylab="Left singular vector 2", main="Top 2 Left Singular Vectors")
dev.off()
pdf("figures/Dabrowska_problem2.pdf",height=3,width=5)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) +
geom_point(aes(x=V2, y=V3, col=as.factor(strain))) +
labs(
title = "PC2 vs. PC3: Genetic Strain Separation",
x = "Principal Component 2",
y = "Principal Component 3",
color = "Genetic Strain"
) +
theme_minimal()
dev.off()
pdf("figures/Dabrowska_problem2.pdf",height=3,width=5)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) +
geom_point(aes(x=V2, y=V3, col=as.factor(strain))) +
labs(
title = "PC2 vs. PC3: Genetic Strain Separation",
x = "PC 2",
y = "PC 3",
color = "Genetic Strain"
) +
theme_minimal()
dev.off()
pdf("figures/Dabrowska_problem2.pdf",height=5,width=10)
PC <- data.table(svd.out$v,pData(bottomly.eset))
ggplot(PC) +
geom_point(aes(x=V2, y=V3, col=as.factor(strain))) +
labs(
title = "PC2 vs. PC3: Genetic Strain Separation",
x = "PC 2",
y = "PC 3",
color = "Genetic Strain"
) +
theme_minimal()
dev.off()
